pipeline {
  agent any
  options { timestamps(); ansiColor('xterm') }
  parameters {
    choice(name: 'ACTION', choices: ['PLAN','APPLY','DESTROY'], description: 'Terraform action')
    string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region')
  }
  environment { TF_IN_AUTOMATION='true'; AWS_DEFAULT_REGION="${params.AWS_REGION}" }
  stages {
    stage('Checkout'){ steps{ checkout scm } }
    stage('Terraform Init'){
      steps{
        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]){
          dir('infra'){ sh 'terraform init -backend-config=backend.hcl' }
        }
      }
    }
    stage('Fmt & Validate'){ when{ expression{ params.ACTION != 'DESTROY' } }
      steps{ dir('infra'){ sh 'terraform fmt -check && terraform validate' } } }
    stage('Plan'){ when{ expression{ params.ACTION != 'DESTROY' } }
      steps{ dir('infra'){ sh 'terraform plan -out=tfplan' } }
      post{ always{ dir('infra'){ sh 'terraform show -no-color tfplan > tfplan.txt || true'; archiveArtifacts artifacts: 'tfplan*', fingerprint: true, onlyIfSuccessful: false } } } }
    stage('Approval'){ when{ expression{ params.ACTION == 'APPLY' } } steps{ input message: 'Apply the plan?', ok: 'Apply now' } }
    stage('Apply'){ when{ expression{ params.ACTION == 'APPLY' } } steps{ dir('infra'){ sh 'terraform apply -auto-approve tfplan' } } }
    stage('Destroy'){ when{ expression{ params.ACTION == 'DESTROY' } } steps{ dir('infra'){ sh 'terraform destroy -auto-approve' } } }
  }
}
